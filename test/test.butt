#!/bin/env butt

#######################################
## Basic
#######################################
# start "this is example of commented test"
#   assert_equal 1 0
# end
#######################################
start "butt without arguments fails"
  debug 'butt'
  assert_equal "$status" 2
  assert_contains "${errlines[0]}" "[error]: Invalid number of arguments"
end
#######################################
start "butt with invalid option fails"
  debug 'butt --invalid'
  assert_equal "$status" 2
  assert_contains "${errlines[0]}" "unrecognized option '--invalid'"
end
#######################################
start "butt -V show version"
  debug 'butt -V'
  assert_equal "$status" 0
  assert_equal "$outlines" "$(version)"
  debug 'butt --version'
  assert_equal "$status" 0
  assert_equal "$outlines" "$(version)"
end
#######################################
start "butt -h show help"
  debug 'butt -h'
  assert_equal "$status" 0
  assert_startwith "${outlines[0]}" "Usage: butt ["
  debug 'butt --help'
  assert_equal "$status" 0
  assert_startwith "${outlines[0]}" "Usage: butt ["
end
#######################################
start "butt with skip=1 option skip test"
  debug 'butt --color=never -s1 cases/pass.butt'
  assert_equal "$status" 0
  assert_equal "${outlines[0]}" "ok 1 # skip empty is ok"
  assert_equal "${outlines[1]}" "ok 2 - true"
  assert_equal "${outlines[7]}" "1..7"
  assert_equal "${outlines[8]}" "# All 7 tests successful or skipped"
end
#######################################
start "butt with limit=2 skip 2 tests"
  debug 'butt --color=never -l2 cases/pass.butt'
  assert_equal "$status" 0
  assert_equal "${outlines[2]}" "1..2"
  assert_equal "${outlines[3]}" "# All 2 tests successful or skipped"
end
#######################################
## Butt output
#######################################
start "empty file should not fail"
  debug 'butt cases/empty.butt'
  assert_equal "$status" 0
  assert_equal "$outlines" "1..0"
end
#######################################
start "file with terminating command end execution and return the command status code"
  debug 'butt cases/terminate.butt'
  assert_equal "$status" 111
  assert_equal "${outlines[1]}" "1..1"
end
#######################################
start "successful tests return 0 status code with appropriate output"
  debug 'butt cases/pass.butt'
  assert_equal "$status" 0
  assert_equal "${outlines[7]}" "1..7"
  assert_equal "${outlines[8]}" "# All 7 tests successful or skipped"
end
#######################################
start "test with command returning non-zero status code bail out"
  debug 'butt --color=never cases/bail.butt'
  assert_equal "$status" 1
  assert_equal "${outlines[0]}" "Bail out! cases/bail.butt failed on line 5"
end
#######################################
start "failing tests return 1 status code with appropriate output"
  debug 'butt cases/fail.butt'
  assert_equal "$status" 1
  assert_equal "${outlines[3]}" "1..3"
  assert_equal "${outlines[4]}" "# Looks like you failed 3 tests of 3"
end
#######################################
start "butt with verbose show failing tests details"
  debug 'butt -v cases/fail.butt'
  assert_equal "$status" 1
  assert_equal "${outlines[1]}" "#   saw: a"
  assert_equal "${outlines[2]}" "#   not: "
end
#######################################
start "butt with --color=never output plain string"
  debug 'butt -v --color=never cases/fail.butt'
  assert_equal "$status" 1
  assert_equal "${outlines[0]}" "# assert_equal"
end
#######################################
start "butt in pipe automatically output plain string"
  debug 'butt -v cases/fail.butt | cat -'
  assert_equal "$status" 0
  assert_equal "${outlines[0]}" "# assert_equal"
end
#######################################
start "butt in pipe with --color=always should output colored string"
  debug 'butt -v --color=always cases/fail.butt | cat -'
  assert_equal "$status" 0
  assert_equal "${outlines[0]}" "# $(tput setaf "1")assert_equal$(tput sgr0)"
end
#######################################